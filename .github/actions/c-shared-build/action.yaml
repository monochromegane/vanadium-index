name: c-shared-build
inputs:
  pkg_name:
    description: 'Package name'
    required: true
runs:
  using: composite
  steps:
  - uses: actions/setup-go@v5
    with:
      go-version: stable
  - name: Setup Go packages
    shell: bash
    run: |
      go install github.com/x-motemen/gobump/cmd/gobump@latest
  - name: Set file names
    shell: bash
    run: |
      VERSION=$(gobump show -r .)
      echo "LIB_NAME=${{ inputs.pkg_name }}" >> $GITHUB_ENV
      echo "LIB_FILE=${{ inputs.pkg_name }}.${{ matrix.libext }}" >> $GITHUB_ENV
      echo "HEADER_FILE=${{ inputs.pkg_name }}.h" >> $GITHUB_ENV
      echo "ARCHIVE_FILE=${{ inputs.pkg_name }}_v${VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}.${{ matrix.archive }}" >> $GITHUB_ENV
      if [ "${{ matrix.goos }}" = "darwin" ]; then
        echo "EXTLDFLAGS=-Wl,-install_name,@loader_path/${{ inputs.pkg_name }}.${{ matrix.libext }}" >> $GITHUB_ENV
      else
        echo "EXTLDFLAGS=" >> $GITHUB_ENV
      fi
      echo "DEF_FILE=${{ inputs.pkg_name }}.def" >> $GITHUB_ENV
      echo "IMPORT_LIB=${{ inputs.pkg_name }}.lib" >> $GITHUB_ENV
  - name: Build
    shell: bash
    run: |
      mkdir dist
      go build -o dist/${LIB_FILE} -buildmode=c-shared -ldflags="-s -w -extldflags=${EXTLDFLAGS}" c-shared/vanadium-index/main.go
  - name: Export symbols (Windows)
    if: matrix.goos == 'windows'
    shell: cmd
    run: |
      call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo
      cd dist
      dumpbin /exports %LIB_FILE% > exports.txt
  - name: Generate .def from exports.txt (Windows)
    if: matrix.goos == 'windows'
    shell: pwsh
    run: |
      Set-Location dist
      "LIBRARY $($env:LIB_NAME)" | Out-File $env:DEF_FILE -Encoding ASCII
      'EXPORTS' | Add-Content $env:DEF_FILE -Encoding ASCII
      Select-String '^\s*\d+\s+[0-9A-F]+\s+[0-9A-F]+\s+(\S+)$' exports.txt |
      ForEach-Object { $_.Matches[0].Groups[1].Value } |
      Add-Content $env:DEF_FILE -Encoding ASCII
  - name: Generate .lib from .def (Windows)
    if: matrix.goos == 'windows'
    shell: cmd
    run: |
      call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo
      cd dist
      lib /def:%DEF_FILE% /machine:x64 /out:%IMPORT_LIB%
  - name: Create archive (tar.gz)
    if: matrix.archive == 'tar.gz'
    shell: bash
    run: |
      tar -czvf ${ARCHIVE_FILE} -C dist ${LIB_FILE} ${HEADER_FILE}
  - name: Create archive (zip on Windows)
    if: matrix.archive == 'zip' && matrix.goos == 'windows'
    shell: pwsh
    run: |
      Compress-Archive -Path "dist\${{ env.LIB_FILE }}", "dist\${{ env.HEADER_FILE }}", "dist\${{ env.IMPORT_LIB }}" -DestinationPath "${{ env.ARCHIVE_FILE }}"
  - name: Create archive (zip on Unix)
    if: matrix.archive == 'zip' && matrix.goos != 'windows'
    shell: bash
    run: |
      zip -j ${ARCHIVE_FILE} dist/${LIB_FILE} dist/${HEADER_FILE}
  - name: Upload archive
    uses: actions/upload-artifact@v4
    with:
      name: ${{ matrix.goos }}_${{ matrix.goarch }}
      path: ${{ env.ARCHIVE_FILE }}
